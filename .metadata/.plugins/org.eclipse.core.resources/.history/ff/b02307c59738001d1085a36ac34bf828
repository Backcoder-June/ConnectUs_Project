package connectus.product;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.multipart.MultipartFile;

import connectus.ApiClient;
import connectus.geoapiignore;
import connectus.reservation.ReservationDTO;

@Controller
public class ProductController {
	
	
	@Autowired
	ProductDAO boardDAO;
	
	// 홈 
	@GetMapping("/")
	public String home() {
		return "home";
	}

	// 전체 물품 조회
	@GetMapping("/allboard")
	public String allboard(Model model) {
		
		List<ProductDTO> list = boardDAO.allBoard();
	
		model.addAttribute("allboard", list);
		return "board/allboard";
	}
	
	// 물품 상세페이지 
	@GetMapping("/board/{boardid}")
	public String oneBoard(@PathVariable("boardid")int boardid, Model model) {
		
		ProductDTO targetBoard = boardDAO.oneBoard(boardid);
		
		List<ReservationDTO> reservList = boardDAO.allReservation(boardid);
		
		
		model.addAttribute("reservationList", reservList);
		model.addAttribute("oneBoard", targetBoard);

		return "board/oneboard";
	}
	
	
	
	//글작성 폼 
	@GetMapping("/registerBoard")
	public String registerBoard() {
		
		return "board/insertBoardForm";
	}
	
	// 글작성 
	@PostMapping("/registerBoard")
	public String registerProcess(ProductDTO dto, MultipartFile file1) throws Exception{
		
		String savePath = "c:/upload/"; 
		
		
		// 이미지 이름 set 
		if(!file1.isEmpty()) {
			String originalname1 = file1.getOriginalFilename();
			String onlyfilename = originalname1.substring(0, originalname1.indexOf("."));
			String extname = originalname1.substring(originalname1.indexOf("."));
			String newname = onlyfilename + "(" + UUID.randomUUID().toString() + ")" + extname; 
			File serverfile1 = new File(savePath + newname);
			file1.transferTo(serverfile1);

				dto.setImg(newname); 
			}else {
				dto.setImg("noimg.png");
			}
			
		// 지역 이름 set 	( 이거 동네는 매번 위치를 킬 수 없으니까 회원가입할 때, 혹은 기간에 한번씩만 인증하는식으로 받아서 DTO 에 넣어두고 사용하자 )
			ApiClient apiClient = new ApiClient(geoapiignore.geoaccess, geoapiignore.geosecret);
			
			String geo = apiClient.run(geoapiignore.geoip);
			
			int index = geo.indexOf("r3");
			int index2 = geo.indexOf("lat");
			
			String region = geo.substring(index+6, index2-3);
			System.out.println(region);
			
			dto.setBoardRegion(region); 
			
		boardDAO.insertBoard(dto);
		return "redirect:/allboard";
	}
	
	
	// 글삭제 
	@PostMapping("/board/{boardid}/delete")
	public String deleteBoard(@PathVariable("boardid")int boardid) {
		boardDAO.deleteBoard(boardid);
		return "redirect:/allboard";
	}
	
	
	// 글수정
	@GetMapping("/board/{boardid}/update")
	public String updateBoard(@PathVariable("boardid")int boardid, Model model) {
		model.addAttribute("updateBoard", boardDAO.oneBoard(boardid));
		return "board/updateBoardForm";
	}

	@PostMapping("/board/{boardid}/updateprocess")
	public String updateBoardProcess(@PathVariable("boardid")int boardid,ProductDTO boardDTO, MultipartFile file1) throws IllegalStateException, IOException {
		// update 할 아이디 set 
		boardDTO.setId(boardid);
		
		// 이미지 다시 Set 
		String savePath = "c:/upload/"; 
		
		if(!file1.isEmpty()) {
			String originalname1 = file1.getOriginalFilename();
			String onlyfilename = originalname1.substring(0, originalname1.indexOf("."));
			String extname = originalname1.substring(originalname1.indexOf("."));
			
			String newname = onlyfilename + "(" + UUID.randomUUID().toString() + ")" + extname; 
			
			File serverfile1 = new File(savePath + newname);
			file1.transferTo(serverfile1);
			boardDTO.setImg(newname); 
			}else {
				boardDTO.setImg("noimg.png");
			}
		
		// update 실행 
		int updateResult = boardDAO.updateBoard(boardDTO);
		
		return "redirect:/allboard";
	}

	
	
	// 검색
	@GetMapping("/searchboard")
	public String searchList(String item, String search, Model model) {

		HashMap<String, String> map = new HashMap<>();
		map.put("item", item);
		map.put("search", search);

		List<ProductDTO> searchList = boardDAO.searchList(map);
		
		model.addAttribute("searchList", searchList);
		return "board/searchList";
	}
	
	
	
	
	
	

	//
}
